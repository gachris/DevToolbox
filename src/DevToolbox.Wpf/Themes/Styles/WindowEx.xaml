<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:DevToolbox.Wpf.Controls"
    xmlns:converters="clr-namespace:DevToolbox.Wpf.Converters"
    xmlns:helpers="clr-namespace:DevToolbox.Wpf.Helpers"
    xmlns:markup="clr-namespace:DevToolbox.Wpf.Markup"
    xmlns:windows="clr-namespace:DevToolbox.Wpf.Windows">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Background}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Foreground}" Color="{markup:ChromeButtonColorKey DarkColor='#F1F1F1', LightColor='#1E1E1E'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=BorderBrush}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBackground}" Color="{markup:ChromeButtonColorKey DarkColor='#0FFFFFFF', LightColor='#0F000000', SystemColorType=Accent}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverForeground}" Color="{markup:ChromeButtonTextColorKey DarkColorType=AccentDark3, DarkBackground='#0FFFFFFF', DarkForeground='#F1F1F1', LightColorType=AccentLight3, LightBackground='#0F000000', LightForeground='#1E1E1E', SystemColorType=Accent}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBorderBrush}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBackground}" Color="{markup:ChromeButtonColorKey DarkColor='#0AFFFFFF', LightColor='#0A000000', SystemColorType=AccentLight1}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedForeground}" Color="{markup:ChromeButtonTextColorKey DarkColorType=AccentDark3, DarkBackground='#0AFFFFFF', DarkForeground='#F1F1F1', LightColorType=AccentLight3, LightBackground='#0A000000', LightForeground='#1E1E1E', SystemColorType=Accent}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBorderBrush}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBackground}" Color="{markup:ChromeButtonColorKey DarkColor='#0BFFFFFF', LightColor='#0B000000'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledForeground}" Color="{markup:ChromeButtonColorKey DarkColor='#818183', LightColor='#818183'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBorderBrush}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveBackground}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveForeground}" Color="{markup:ChromeButtonColorKey DarkColor='#818183', LightColor='#818183', SystemColorType=AccentLight2}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveBorderBrush}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <!--  Close button base state  -->
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Background, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Foreground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#F1F1F1', LightColor='#1E1E1E'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=BorderBrush, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <!--  MouseOver  -->
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBackground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#C42B1C', LightColor='#C42B1C'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverForeground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#F1F1F1', LightColor='#F1F1F1'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBorderBrush, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#C42B1C', LightColor='#C42B1C'}" />

    <!--  Pressed  -->
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBackground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#AF281C', LightColor='#AF281C'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedForeground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#F1F1F1', LightColor='#F1F1F1'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBorderBrush, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#AF281C', LightColor='#AF281C'}" />

    <!--  Disabled  -->
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBackground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#0BFFFFFF', LightColor='#0B000000'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledForeground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#818183', LightColor='#818183'}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBorderBrush, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <!--  Inactive  -->
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveBackground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveForeground, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor='#818183', LightColor='#818183', SystemColorType=AccentLight2}" />
    <SolidColorBrush x:Key="{markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveBorderBrush, IsClose=true}" Color="{markup:ChromeButtonColorKey DarkColor=Transparent, LightColor=Transparent}" />

    <Style x:Key="FocusVisualStyle">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle SnapsToDevicePixels="true" Stroke="{markup:ThemeBrush DarkThemeBrush='#FFFFFF', LightThemeBrush='#000000', DefaultBrush='#000000', HighContrastBrush={x:Static SystemColors.ActiveBorderBrush}}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button.BaseChromeStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <controls:FontGlyph
                        x:Name="PART_Path"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Code="{Binding}"
                        FontFamily="Segoe Fluent Icons, Segoe MDL2 Assets, pack://application:,,,/DevToolbox.Wpf;component/DevToolbox-Icons-v1.0/fonts/#DevToolbox-Icons"
                        FontSize="10"
                        Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Foreground}"
                        SnapsToDevicePixels="True"
                        TextOptions.TextFormattingMode="Display" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=windows:WindowEx}, Path=Chrome.CaptionHeight}" />

        <!--  Base state  -->
        <Setter Property="Background" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Background}}" />
        <Setter Property="Foreground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Foreground}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=BorderBrush}}" />

        <!--  MouseOver  -->
        <Setter Property="helpers:UIElementHelper.MouseOverBackground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBackground}}" />
        <Setter Property="helpers:UIElementHelper.MouseOverForeground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverForeground}}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBorderBrush}}" />

        <!--  Pressed  -->
        <Setter Property="helpers:UIElementHelper.PressedBackground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBackground}}" />
        <Setter Property="helpers:UIElementHelper.PressedForeground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedForeground}}" />
        <Setter Property="helpers:UIElementHelper.PressedBorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBorderBrush}}" />

        <!--  Disabled  -->
        <Setter Property="helpers:UIElementHelper.DisabledBackground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBackground}}" />
        <Setter Property="helpers:UIElementHelper.DisabledForeground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledForeground}}" />
        <Setter Property="helpers:UIElementHelper.DisabledBorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBorderBrush}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.CornerRadius)}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBackground)}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverBackground)}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverBorderBrush)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(helpers:UIElementHelper.MouseOverForeground)}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBackground)}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBorderBrush)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(helpers:UIElementHelper.PressedForeground)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledBackground)}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledBorderBrush)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(helpers:UIElementHelper.DisabledForeground)}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveBackground}}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveBorderBrush}}" />
                            <Setter Property="Foreground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=InactiveForeground}}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Close">
                <Setter Property="Content" Value="{x:Static controls:Icons.ChromeClose}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Restore">
                <Setter Property="Content" Value="{x:Static controls:Icons.ChromeRestore}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Max">
                <Setter Property="Content" Value="{x:Static controls:Icons.ChromeMaximize}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Min">
                <Setter Property="Content" Value="{x:Static controls:Icons.ChromeMinimize}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Help">
                <Setter Property="Content" Value="{x:Static controls:Icons.Help}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=HelpButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="ToolWindow">
                <Setter Property="Width" Value="21" />
                <Setter Property="Height" Value="21" />
                <Setter Property="Margin" Value="0,0,5,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=MinimizeButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=MaximizeButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=RestoreButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=CloseButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}">

        <!--  Base state  -->
        <Setter Property="Background" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Background, IsClose=True}}" />
        <Setter Property="Foreground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=Foreground, IsClose=True}}" />
        <Setter Property="BorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=BorderBrush, IsClose=True}}" />

        <!--  MouseOver  -->
        <Setter Property="helpers:UIElementHelper.MouseOverBackground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBackground, IsClose=True}}" />
        <Setter Property="helpers:UIElementHelper.MouseOverForeground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverForeground, IsClose=True}}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=MouseOverBorderBrush, IsClose=True}}" />

        <!--  Pressed  -->
        <Setter Property="helpers:UIElementHelper.PressedBackground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBackground, IsClose=True}}" />
        <Setter Property="helpers:UIElementHelper.PressedForeground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedForeground, IsClose=True}}" />
        <Setter Property="helpers:UIElementHelper.PressedBorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=PressedBorderBrush, IsClose=True}}" />

        <!--  Disabled  -->
        <Setter Property="helpers:UIElementHelper.DisabledBackground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBackground, IsClose=True}}" />
        <Setter Property="helpers:UIElementHelper.DisabledForeground" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledForeground, IsClose=True}}" />
        <Setter Property="helpers:UIElementHelper.DisabledBorderBrush" Value="{DynamicResource {markup:ChromeButtonResourceKey TypeInTargetAssembly={x:Type markup:ButtonChromeBrushKey}, ResourceId=DisabledBorderBrush, IsClose=True}}" />

        <Style.Triggers>
            <DataTrigger Binding="{Binding WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="ToolWindow">
                <Setter Property="Width" Value="21" />
                <Setter Property="Height" Value="21" />
                <Setter Property="Margin" Value="0,0,5,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=BackButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Width" Value="30" />
        <Setter Property="Height" Value="30" />
        <Setter Property="Padding" Value="0" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ToolTip" Value="Back" />
        <Setter Property="helpers:UIElementHelper.CornerRadius" Value="4" />
        <Setter Property="Content" Value="{x:Static controls:Icons.ChromeBack}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisualStyle}" />
    </Style>

    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx}, ResourceId=ChromeStyleKey}" TargetType="{x:Type windows:WindowEx}">
        <Setter Property="Background" Value="{markup:ThemeBrush DarkThemeBrush='#1F1F1F', LightThemeBrush='#EEEEF2', DefaultBrush='#FFFFFF', HighContrastBrush={x:Static SystemColors.WindowBrush}}" />
        <Setter Property="Foreground" Value="{markup:ThemeBrush DarkThemeBrush='#FFFFFF', LightThemeBrush='#000000', DefaultBrush='#000000', HighContrastBrush={x:Static SystemColors.ControlTextBrush}}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:WindowEx}">
                    <AdornerDecorator>
                        <controls:WindowHeaderedContentControl
                            Background="{TemplateBinding Background}"
                            Focusable="False"
                            Header="{TemplateBinding Header}"
                            HeaderTemplate="{TemplateBinding HeaderTemplate}"
                            Style="{TemplateBinding HeaderedContentControlStyle}">
                            <ContentPresenter />
                        </controls:WindowHeaderedContentControl>
                    </AdornerDecorator>
                    <ControlTemplate.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding Source={x:Static SystemParameters.HighContrast}}" Value="False" />
                                <Condition Binding="{Binding Path=(windows:WindowBehavior.HasEffect), RelativeSource={RelativeSource Mode=Self}}" Value="True" />
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Background" Value="Transparent" />
                        </MultiDataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>