<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:DevToolbox.Wpf.Controls"
    xmlns:converters="clr-namespace:DevToolbox.Wpf.Converters"
    xmlns:helpers="clr-namespace:DevToolbox.Wpf.Helpers"
    xmlns:windows="clr-namespace:DevToolbox.Wpf.Windows">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="Button.BaseChromeStyle" TargetType="{x:Type Button}">
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Width" Value="45" />
        <Setter Property="BorderThickness" Value="0" />
        <Setter Property="ContentTemplate">
            <Setter.Value>
                <DataTemplate>
                    <controls:FontGlyph
                        x:Name="PART_Path"
                        HorizontalAlignment="Center"
                        VerticalAlignment="Center"
                        Code="{Binding}"
                        FontSize="16"
                        Foreground="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Button}, Path=Foreground}"
                        SnapsToDevicePixels="True"
                        TextOptions.TextFormattingMode="Display" />
                </DataTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Height" Value="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=windows:WindowEx}, Path=Chrome.CaptionHeight}" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource Button.Chrome.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Button.Chrome.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Chrome.BorderBrush}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBackground" Value="{DynamicResource Button.Chrome.MouseOverBackground}" />
        <Setter Property="helpers:UIElementHelper.MouseOverForeground" Value="{DynamicResource Button.Chrome.MouseOverForeground}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBorderBrush" Value="{DynamicResource Button.Chrome.MouseOverBorderBrush}" />
        <Setter Property="helpers:UIElementHelper.PressedBackground" Value="{DynamicResource Button.Chrome.PressedBackground}" />
        <Setter Property="helpers:UIElementHelper.PressedForeground" Value="{DynamicResource Button.Chrome.PressedForeground}" />
        <Setter Property="helpers:UIElementHelper.PressedBorderBrush" Value="{DynamicResource Button.Chrome.PressedBorderBrush}" />
        <Setter Property="helpers:UIElementHelper.DisabledBackground" Value="{DynamicResource Button.Chrome.DisabledBackground}" />
        <Setter Property="helpers:UIElementHelper.DisabledForeground" Value="{DynamicResource Button.Chrome.DisabledForeground}" />
        <Setter Property="helpers:UIElementHelper.DisabledBorderBrush" Value="{DynamicResource Button.Chrome.DisabledBorderBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border
                        x:Name="border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.CornerRadius)}"
                        SnapsToDevicePixels="true">
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsDefaulted" Value="true">
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBackground)}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverBackground)}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverBorderBrush)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(helpers:UIElementHelper.MouseOverForeground)}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBackground)}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBorderBrush)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(helpers:UIElementHelper.PressedForeground)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="border" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledBackground)}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledBorderBrush)}" />
                            <Setter Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=(helpers:UIElementHelper.DisabledForeground)}" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="False">
                            <Setter TargetName="border" Property="Background" Value="{DynamicResource Button.Chrome.InactiveBackground}" />
                            <Setter TargetName="border" Property="BorderBrush" Value="{DynamicResource Button.Chrome.InactiveBorderBrush}" />
                            <Setter Property="Foreground" Value="{DynamicResource Button.Chrome.InactiveForeground}" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Close">
                <Setter Property="Content" Value="{x:Static controls:Symbol.ChromeClose}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Restore">
                <Setter Property="Content" Value="{x:Static controls:Symbol.ChromeRestore}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Max">
                <Setter Property="Content" Value="{x:Static controls:Symbol.ChromeMaximize}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Min">
                <Setter Property="Content" Value="{x:Static controls:Symbol.ChromeMinimize}" />
            </Trigger>
            <Trigger Property="windows:WindowEx.HitTestResult" Value="Help">
                <Setter Property="Content" Value="{x:Static controls:Symbol.F1Help}" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=HelpButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="ToolWindow">
                <Setter Property="Width" Value="21" />
                <Setter Property="Height" Value="21" />
                <Setter Property="Margin" Value="0,0,5,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=MinimizeButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=MaximizeButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=RestoreButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}" />

    <Style
        x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                     ResourceId=CloseButtonStyleKey}"
        BasedOn="{StaticResource Button.BaseChromeStyle}"
        TargetType="{x:Type Button}">
        <Setter Property="Background" Value="{DynamicResource Button.Chrome.Close.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource Button.Chrome.Close.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Chrome.Close.BorderBrush}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBackground" Value="{DynamicResource Button.Chrome.Close.MouseOverBackground}" />
        <Setter Property="helpers:UIElementHelper.MouseOverForeground" Value="{DynamicResource Button.Chrome.Close.MouseOverForeground}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBorderBrush" Value="{DynamicResource Button.Chrome.Close.MouseOverBorderBrush}" />
        <Setter Property="helpers:UIElementHelper.PressedBackground" Value="{DynamicResource Button.Chrome.Close.PressedBackground}" />
        <Setter Property="helpers:UIElementHelper.PressedForeground" Value="{DynamicResource Button.Chrome.Close.PressedForeground}" />
        <Setter Property="helpers:UIElementHelper.PressedBorderBrush" Value="{DynamicResource Button.Chrome.Close.PressedBorderBrush}" />
        <Setter Property="helpers:UIElementHelper.DisabledBackground" Value="{DynamicResource Button.Chrome.Close.DisabledBackground}" />
        <Setter Property="helpers:UIElementHelper.DisabledForeground" Value="{DynamicResource Button.Chrome.Close.DisabledForeground}" />
        <Setter Property="helpers:UIElementHelper.DisabledBorderBrush" Value="{DynamicResource Button.Chrome.Close.DisabledBorderBrush}" />
        <Style.Triggers>
            <DataTrigger Binding="{Binding WindowStyle, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=Window}}" Value="ToolWindow">
                <Setter Property="Width" Value="21" />
                <Setter Property="Height" Value="21" />
                <Setter Property="Margin" Value="0,0,5,0" />
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <DataTemplate x:Key="HeaderTemplate">
        <TextBlock
            x:Name="TextBlockTitle"
            Padding="8,4"
            HorizontalAlignment="Left"
            VerticalAlignment="Center"
            Foreground="{DynamicResource Window.Active.Title.Foreground}"
            Text="{Binding}"
            TextTrimming="CharacterEllipsis" />
        <DataTemplate.Triggers>
            <Trigger SourceName="TextBlockTitle" Property="Text" Value="">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <Trigger SourceName="TextBlockTitle" Property="Text" Value="{x:Null}">
                <Setter Property="Visibility" Value="Collapsed" />
            </Trigger>
            <DataTrigger Binding="{Binding Path=IsActive, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Value="False">
                <Setter TargetName="TextBlockTitle" Property="Foreground" Value="{DynamicResource Window.Inactive.Title.Foreground}" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <DataTemplate x:Key="IconTemplate">
        <ContentPresenter
            Width="24"
            Height="24"
            Margin="8,0,0,0"
            VerticalAlignment="Center"
            Content="{Binding}" />
    </DataTemplate>

    <Style x:Key="WindowHeaderedContentControlStyle" TargetType="{x:Type HeaderedContentControl}">
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalAlignment" Value="Stretch" />
        <Setter Property="VerticalAlignment" Value="Stretch" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type HeaderedContentControl}">
                    <Border
                        x:Name="PART_Border"
                        Background="{TemplateBinding Background}"
                        BorderBrush="{TemplateBinding BorderBrush}"
                        BorderThickness="{TemplateBinding BorderThickness}"
                        Focusable="{TemplateBinding Focusable}"
                        SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}">
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="CaptionRowDefinition" Height="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=windows:WindowEx}, Path=Chrome.CaptionHeight}" />
                                <RowDefinition Height="*" />
                            </Grid.RowDefinitions>
                            <Grid
                                x:Name="PART_Header"
                                Grid.Row="0"
                                Visibility="{Binding Path=IsTitleBarVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=windows:WindowEx}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="auto" />
                                </Grid.ColumnDefinitions>
                                <ContentControl
                                    Grid.Column="0"
                                    ContentTemplate="{Binding Path=IconTemplate, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=windows:WindowEx}}"
                                    Focusable="False">
                                    <Image x:Name="PART_Icon" Visibility="{Binding ShowIcon, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=windows:WindowEx}, Converter={StaticResource BooleanToVisibilityConverter}}">
                                        <Image.Source>
                                            <MultiBinding Converter="{converters:WindowIconConverter}">
                                                <Binding Path="Icon" RelativeSource="{RelativeSource AncestorType={x:Type Window}}" />
                                            </MultiBinding>
                                        </Image.Source>
                                    </Image>
                                </ContentControl>
                                <ContentPresenter
                                    Grid.Column="1"
                                    Margin="4,0,4,0"
                                    VerticalAlignment="Stretch"
                                    ContentSource="Header"
                                    Focusable="False" />
                                <StackPanel
                                    Grid.Column="2"
                                    HorizontalAlignment="Right"
                                    Orientation="Horizontal">
                                    <Button
                                        x:Name="PART_Help"
                                        windows:WindowEx.HitTestResult="Help"
                                        Command="{x:Static ApplicationCommands.Help}"
                                        CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                                                                      ResourceId=HelpButtonStyleKey}}" />
                                    <Button
                                        x:Name="PART_Minimize"
                                        windows:WindowEx.HitTestResult="Min"
                                        Command="{x:Static SystemCommands.MinimizeWindowCommand}"
                                        CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                                                                      ResourceId=MinimizeButtonStyleKey}}" />
                                    <Button
                                        x:Name="PART_Maximize"
                                        windows:WindowEx.HitTestResult="Max"
                                        Command="{x:Static SystemCommands.MaximizeWindowCommand}"
                                        CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                                                                      ResourceId=MaximizeButtonStyleKey}}" />
                                    <Button
                                        x:Name="PART_Close"
                                        windows:WindowEx.HitTestResult="Close"
                                        Command="{x:Static SystemCommands.CloseWindowCommand}"
                                        CommandTarget="{Binding RelativeSource={RelativeSource AncestorType=Window}}"
                                        Style="{DynamicResource {ComponentResourceKey TypeInTargetAssembly={x:Type windows:WindowEx},
                                                                                      ResourceId=CloseButtonStyleKey}}" />
                                </StackPanel>
                            </Grid>
                            <ContentPresenter
                                Grid.Row="1"
                                ContentSource="Content"
                                Focusable="False" />
                            <ResizeGrip
                                x:Name="PART_ResizeGrip"
                                Grid.Row="1"
                                Margin="2"
                                HorizontalAlignment="Right"
                                VerticalAlignment="Bottom"
                                Panel.ZIndex="2"
                                Visibility="Collapsed"
                                WindowChrome.ResizeGripDirection="BottomRight" />
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Value="CanResizeWithGrip">
                            <Setter TargetName="PART_ResizeGrip" Property="Visibility" Value="Visible" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Value="CanMinimize">
                            <Setter TargetName="PART_Maximize" Property="IsEnabled" Value="False" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding ResizeMode, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Value="NoResize">
                            <Setter TargetName="PART_Minimize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_Maximize" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding WindowStyle, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Value="ToolWindow">
                            <Setter TargetName="PART_Minimize" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_Maximize" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <Trigger SourceName="PART_Help" Property="IsEnabled" Value="False">
                            <Setter TargetName="PART_Help" Property="Visibility" Value="Collapsed" />
                        </Trigger>
                        <DataTrigger Binding="{Binding WindowStyle, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Value="None">
                            <Setter TargetName="PART_Header" Property="Visibility" Value="Collapsed" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource AncestorType=Window, Mode=FindAncestor}}" Value="Maximized">
                            <Setter TargetName="PART_ResizeGrip" Property="Visibility" Value="Collapsed" />
                            <Setter TargetName="PART_Maximize" Property="windows:WindowEx.HitTestResult" Value="Restore" />
                            <Setter TargetName="PART_Maximize" Property="Command" Value="{x:Static SystemCommands.RestoreWindowCommand}" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding Path=IsTitleBarVisible, RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=windows:WindowEx}}" Value="False">
                            <Setter TargetName="CaptionRowDefinition" Property="Height" Value="0" />
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type windows:WindowEx}">
        <Setter Property="Focusable" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Header" Value="{Binding RelativeSource={RelativeSource Mode=Self}, Path=Title}" />
        <Setter Property="Background" Value="{DynamicResource Window.Background}" />
        <Setter Property="IconTemplate" Value="{StaticResource IconTemplate}" />
        <Setter Property="HeaderTemplate" Value="{StaticResource HeaderTemplate}" />
        <Setter Property="HeaderedContentControlStyle" Value="{StaticResource WindowHeaderedContentControlStyle}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type windows:WindowEx}">
                    <AdornerDecorator>
                        <HeaderedContentControl
                            Background="{TemplateBinding Background}"
                            Focusable="{TemplateBinding Focusable}"
                            Header="{TemplateBinding Header}"
                            HeaderTemplate="{TemplateBinding HeaderTemplate}"
                            Style="{TemplateBinding HeaderedContentControlStyle}">
                            <ContentPresenter />
                        </HeaderedContentControl>
                    </AdornerDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="windows:WindowBehaviour.HasEffect" Value="True">
                            <Setter Property="Background" Value="Transparent" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>