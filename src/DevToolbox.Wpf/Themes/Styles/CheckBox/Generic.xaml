<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:controls="clr-namespace:DevToolbox.Wpf.Controls"
    xmlns:helpers="clr-namespace:DevToolbox.Wpf.Helpers">

    <Style x:Key="FocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="2"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="OptionMarkFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle
                        Margin="14,0,0,0"
                        SnapsToDevicePixels="true"
                        Stroke="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"
                        StrokeDashArray="1 2"
                        StrokeThickness="1" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CheckBoxStyle" TargetType="{x:Type CheckBox}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FocusVisualStyle" Value="{StaticResource FocusVisual}" />
        <Setter Property="Background" Value="{DynamicResource CheckBox.Background}" />
        <Setter Property="Foreground" Value="{DynamicResource CheckBox.Foreground}" />
        <Setter Property="BorderBrush" Value="{DynamicResource CheckBox.BorderBrush}" />
        <Setter Property="helpers:UIElementHelper.GlyphBrush" Value="{DynamicResource CheckBox.GlyphBrush}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBackground" Value="{DynamicResource CheckBox.MouseOverBackground}" />
        <Setter Property="helpers:UIElementHelper.MouseOverForeground" Value="{DynamicResource CheckBox.MouseOverForeground}" />
        <Setter Property="helpers:UIElementHelper.MouseOverBorderBrush" Value="{DynamicResource CheckBox.MouseOverBorderBrush}" />
        <Setter Property="helpers:UIElementHelper.MouseOverGlyphBrush" Value="{DynamicResource CheckBox.MouseOverGlyphBrush}" />
        <Setter Property="helpers:UIElementHelper.PressedBackground" Value="{DynamicResource CheckBox.PressedBackground}" />
        <Setter Property="helpers:UIElementHelper.PressedForeground" Value="{DynamicResource CheckBox.PressedForeground}" />
        <Setter Property="helpers:UIElementHelper.PressedBorderBrush" Value="{DynamicResource CheckBox.PressedBorderBrush}" />
        <Setter Property="helpers:UIElementHelper.PressedGlyphBrush" Value="{DynamicResource CheckBox.PressedGlyphBrush}" />
        <Setter Property="helpers:UIElementHelper.DisabledBackground" Value="{DynamicResource CheckBox.DisabledBackground}" />
        <Setter Property="helpers:UIElementHelper.DisabledForeground" Value="{DynamicResource CheckBox.DisabledForeground}" />
        <Setter Property="helpers:UIElementHelper.DisabledBorderBrush" Value="{DynamicResource CheckBox.DisabledBorderBrush}" />
        <Setter Property="helpers:UIElementHelper.DisabledGlyphBrush" Value="{DynamicResource CheckBox.DisabledGlyphBrush}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <Grid
                        x:Name="templateRoot"
                        Background="Transparent"
                        SnapsToDevicePixels="True">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Border
                            x:Name="checkBoxBorder"
                            Margin="1"
                            Padding="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            CornerRadius="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.CornerRadius)}">
                            <Grid x:Name="markGrid">
                                <controls:FontGlyph
                                    x:Name="optionMark"
                                    Margin="1"
                                    Code="{x:Static controls:Symbol.Checkmark}"
                                    FontSize="12"
                                    Foreground="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.GlyphBrush)}"
                                    Opacity="0" />
                                <Rectangle
                                    x:Name="indeterminateMark"
                                    Margin="2"
                                    Fill="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.GlyphBrush)}"
                                    Opacity="0" />
                            </Grid>
                        </Border>
                        <ContentPresenter
                            x:Name="contentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Focusable="False"
                            RecognizesAccessKey="True"
                            SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource OptionMarkFocusVisual}" />
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverBackground)}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverBorderBrush)}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverForeground)}" />
                            <Setter TargetName="optionMark" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverGlyphBrush)}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.MouseOverGlyphBrush)}" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledBackground)}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledBorderBrush)}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledForeground)}" />
                            <Setter TargetName="optionMark" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledGlyphBrush)}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.DisabledGlyphBrush)}" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter TargetName="checkBoxBorder" Property="Background" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBackground)}" />
                            <Setter TargetName="checkBoxBorder" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedBorderBrush)}" />
                            <Setter TargetName="contentPresenter" Property="TextElement.Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedForeground)}" />
                            <Setter TargetName="optionMark" Property="Foreground" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedGlyphBrush)}" />
                            <Setter TargetName="indeterminateMark" Property="Fill" Value="{Binding RelativeSource={RelativeSource Mode=TemplatedParent}, Path=(helpers:UIElementHelper.PressedGlyphBrush)}" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="true">
                            <Setter TargetName="optionMark" Property="Opacity" Value="1" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="0" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="{x:Null}">
                            <Setter TargetName="optionMark" Property="Opacity" Value="0" />
                            <Setter TargetName="indeterminateMark" Property="Opacity" Value="1" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource CheckBoxStyle}" TargetType="{x:Type CheckBox}" />

</ResourceDictionary>